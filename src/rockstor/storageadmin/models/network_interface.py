"""
Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
This file is part of RockStor.

RockStor is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

RockStor is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
"""

from django.db import models


class NetworkInterface(models.Model):
    #connection name. eg: eno1, enp4s0. same as device name
    name = models.CharField(max_length=100, null=True)
    #device name, if any
    dname = models.CharField(max_length=100, null=True)
    #device type, eg: ethernet
    dtype = models.CharField(max_length=64, null=True)
    #device speed capabilities. 1000 Mb/s etc..
    dspeed = models.CharField(max_length=64, null=True)
    #hw mac address, if any
    mac = models.CharField(max_length=100, null=True)
    #auto for dhcp and manual for static
    method = models.CharField(max_length=64, null=True)
    #automatically activate, on boot etc..
    autoconnect = models.CharField(max_length=8, null=True)
    #netmask in ip address format
    netmask = models.CharField(max_length=64, null=True)
    #IP address
    ipaddr = models.CharField(max_length=64, null=True)
    #not really implemented currently, but interfaces can be dedicated for
    #IO or manaagement.
    itype = models.CharField(max_length=100, default='io')
    #gateway address in IP address format
    gateway = models.CharField(max_length=64, null=True)
    #comma separated ip addresses
    dns_servers = models.CharField(max_length=1024, null=True)
    #connection type, ethernet or team
    ctype = models.CharField(max_length=64, null=True)
    #state of the connection. activated etc..
    state = models.CharField(max_length=64, null=True)


    class Meta:
        app_label = 'storageadmin'


#This is the key abstraction for network configuration that is user configurable in Rockstor.
#user can add, delete or modify connections which results in CRUD ops on this model and also
#on other models linked to this one, such as NetworkInterface, EthernetConnection etc..
class NetworkConnection(models.Model):
    #Wired connection 1, Team-team0 etc..
    name = models.CharField(max_length=256, null=True)
    #uuid generated by NM
    uuid = models.CharField(max_length=256, null=True)
    #active (== GENERAL.STATE: activated in nmcli), could also be activating or blank(assumed inactive) -- subtle distinction compared to state of NetworkInterface
    state = models.CharField(max_length=64, null=True)

    #manual or dhcp
    ipv4_method = models.CharField(max_length=64, null=True)
    #comma separated strings of ip/nm_bits. typically just one ip/nm. eg: 192.168.1.5/24
    ipv4_addresses = models.CharField(max_length=1024, null=True)
    #there can only be one ipv4 gateway. eg: 192.168.1.1
    ipv4_gw = models.CharField(max_length=64, null=True)
    #comma separated strings of one or more dns addresses. eg: "8.8.8.8 8.8.4.4"
    ipv4_dns = models.CharField(max_length=256, null=True)
    #comma separated strings of one or more dns search domains. eg: rockstor.com
    ipv4_dns_search = models.CharField(max_length=256, null=True)

    #not clear yet on ipv6 stuff.
    ipv6_method = models.CharField(max_length=1024, null=True)
    ipv6_addresses = models.CharField(max_length=1024, null=True)
    ipv6_gw = models.CharField(max_length=64, null=True)
    ipv6_dns = models.CharField(max_length=256, null=True)
    ipv6_dns_search = models.CharField(max_length=256, null=True)

    #slave connections have a master. eg: team
    master = models.ForeignKey('NetworkConnection', null=True)

    class Meta:
        app_label = 'storageadmin'

#network interfaces/devices are auto detected from the system via "nmcli d show"
#They are not "directly" user configurable. but their attributes are refreshed in two ways
#1. when user configures a NetworkConnection and inturn NetworkInterface is changed, eg: state.
#2. When changes at the system level are picked up.
class NetworkDevice(models.Model):
    #enp0s3, lo etc..
    name = models.CharField(max_length=256, null=True)
    #ethernet, infiniband etc..
    dtype = models.CharField(max_length=100, null=True)
    mac = models.CharField(max_length=100, null=True)
    connection = models.ForeignKey(NetworkConnection, null=True, on_delete=models.SET_NULL)
    #active (== GENERAL.STATE: activated in nmcli), could also be activating or blank(assumed inactive)
    state = models.CharField(max_length=64, null=True)
    mtu = models.CharField(max_length=64, null=True)

    class Meta:
        app_label = 'storageadmin'

#This is the most common of connection types that uses NetworkInterface of dtype=ethernet
class EthernetConnection(models.Model):
    friendly_name = models.CharField(max_length=64, default="ethernet/802-3-ethernet")
    connection = models.ForeignKey(NetworkConnection, null=True)
    mac = models.CharField(max_length=64, null=True)
    cloned_mac = models.CharField(max_length=64, null=True)
    mtu = models.CharField(max_length=64, null=True)

    class Meta:
        app_label = 'storageadmin'


class TeamConnection(models.Model):
    connection = models.ForeignKey(NetworkConnection, null=True)
    #eg: Team1
    name = models.CharField(max_length=64, null=True)
    #json config.
    config = models.CharField(max_length=2048, null=True)

    class Meta:
        app_label = 'storageadmin'


class TeamSlaveConnection(models.Model):
    master = models.ForeignKey(TeamConnection, null=True)
    #eg: Team1-Slave1
    name = models.CharField(max_length=64, null=True)
    interface = models.ForeignKey(NetworkInterface, null=True)

    class Meta:
        app_label = 'storageadmin'
